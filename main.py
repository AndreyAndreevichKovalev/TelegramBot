import telebot
import psycopg2
from telebot.util import quick_markup
from random import shuffle

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
    database="postgres",
    user="postgres",
    password="Ak200213!",
    host="localhost",
    port="5432"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("7016352548:AAHwqc4Oz-kSZYKdYn13VN6NyUq6QgPy6Os")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---


@bot.message_handler(commands=['start'])
def start(message):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    with conn.cursor() as cur:
        cur.execute(
            "INSERT INTO users (user_id, username) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING",
            (message.chat.id, message.from_user.username),
        )
        conn.commit()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    markup = quick_markup({
        "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫": {"callback_data": "game_start"},
        "–°–ª–æ–≤–∞—Ä—å": {"callback_data": "dictionary"}
    }, row_width=2)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ú—ã –±—É–¥–µ–º –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –ø–µ—Ä–µ–≤–æ–¥–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. \n\n"
        "–ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫' –æ—Ç–∫—Ä–æ–µ—Ç –Ω–∞–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ —Å –æ–¥–Ω–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º. \n\n"
        "–ö–Ω–æ–ø–∫–∞ '–°–ª–æ–≤–∞—Ä—å' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã.",
        reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    with conn.cursor() as cur:
        cur.execute(
            "INSERT INTO users (user_id, username) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING",
            (message.chat.id, message.from_user.username),
        )
        conn.commit()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    markup = quick_markup({
        "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫": {"callback_data": "game_start"},
        "–°–ª–æ–≤–∞—Ä—å": {"callback_data": "dictionary"}
    }, row_width=2)
    bot.send_message(
        message.chat.id,
        "–ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫' –æ—Ç–∫—Ä–æ–µ—Ç –Ω–∞–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ —Å –æ–¥–Ω–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º. \n\n"
        "–ö–Ω–æ–ø–∫–∞ '–°–ª–æ–≤–∞—Ä—å' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã.",
        reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    with conn.cursor() as cur:
        cur.execute(
            "INSERT INTO users (user_id, username) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING",
            (message.chat.id, message.from_user.username),
        )
        conn.commit()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    markup = quick_markup({
        "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫": {"callback_data": "game_start"},
        "–°–ª–æ–≤–∞—Ä—å": {"callback_data": "dictionary"}
    }, row_width=2)
    bot.send_message(
        message.chat.id,
        "–ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫' –æ—Ç–∫—Ä–æ–µ—Ç –Ω–∞–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ —Å –æ–¥–Ω–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º. \n\n"
        "–ö–Ω–æ–ø–∫–∞ '–°–ª–æ–≤–∞—Ä—å' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã.",
        reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "game_start":
        send_word(call.message)
    elif call.data == "dictionary":
        show_dictionary_menu(call.message)
    elif call.data == "show_words":
        show_all_words(call.message)
    elif call.data == "add_word":
        add_word(call.message)
    elif call.data == "delete_word":
        delete_word(call.message)
    elif call.data.startswith("check_"):
        check_answer(call)
    elif call.data == "start":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        start(call.message)


def send_word(message):
    chat_id = message.chat.id
    with conn.cursor() as cur:
        cur.execute(
            "SELECT word_id, russian FROM words ORDER BY RANDOM() LIMIT 1")
        word_id, russian = cur.fetchone()

    # –ü–æ–ª—É—á–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤–∞ (–æ—Ç–ª–∏—á–Ω—ã—Ö –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ)
    with conn.cursor() as cur:
        cur.execute(
            "SELECT english FROM words WHERE word_id != %s ORDER BY RANDOM() LIMIT 3",
            (word_id,),
        )
        wrong_options = [row[0] for row in cur.fetchall()]

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
    with conn.cursor() as cur:
        cur.execute("SELECT english FROM words WHERE word_id = %s", (word_id,))
        correct_option = cur.fetchone()[0]

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ–≥–æ
    options = wrong_options + [correct_option]
    shuffle(options)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    markup = quick_markup({
        options[0]: {"callback_data": f"check_{options[0]}_{word_id}"},
        options[1]: {"callback_data": f"check_{options[1]}_{word_id}"},
        options[2]: {"callback_data": f"check_{options[2]}_{word_id}"},
        options[3]: {"callback_data": f"check_{options[3]}_{word_id}"},
        "–î–∞–ª—å—à–µ": {"callback_data": "game_start"},
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": {"callback_data": "start"}
    }, row_width=2)

    bot.send_message(
        chat_id,
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: *{russian}*",
        reply_markup=markup,
        parse_mode="Markdown"
    )


def show_dictionary_menu(message):
    markup = quick_markup({
        "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞": {"callback_data": "show_words"},
        "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ": {"callback_data": "add_word"},
        "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ": {"callback_data": "delete_word"},
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": {"callback_data": "start"}
    }, row_width=1)
    bot.send_message(message.chat.id, "–ú–µ–Ω—é —Å–ª–æ–≤–∞—Ä—è", reply_markup=markup)


def show_all_words(message):
    user_id = message.chat.id
    with conn.cursor() as cur:
        cur.execute(
            """
            SELECT w.english, w.russian
            FROM words w
            JOIN user_words uw ON w.word_id = uw.word_id
            WHERE uw.user_id = %s
            """,
            (user_id,),
        )
        words = cur.fetchall()

    if words:
        word_list = "\n".join(
            [f"{i + 1}. {english} - {russian}" for i, (english, russian) in enumerate(words)])
        bot.send_message(message.chat.id, f"–í–∞—à–∏ —Å–ª–æ–≤–∞:\n{word_list}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ.")


def add_word(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: *hello-–ø—Ä–∏–≤–µ—Ç*",
        parse_mode="Markdown"
    )
    bot.register_next_step_handler(msg, process_word_input)


def process_word_input(message):
    try:
        english, russian = message.text.split("-")
        english = english.strip().lower()
        russian = russian.strip()
        user_id = message.chat.id

        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ words
            cur.execute("SELECT word_id FROM words WHERE english = %s", (english,))
            result = cur.fetchone()

            if result:
                word_id = result[0]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_words
                cur.execute("SELECT 1 FROM user_words WHERE user_id = %s AND word_id = %s", (user_id, word_id))
                if cur.fetchone():
                    bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ user_words –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cur.execute("INSERT INTO user_words (user_id, word_id) VALUES (%s, %s)", (user_id, word_id))
                    conn.commit()
                    bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ *{english} - {russian}* –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å.",
                                     parse_mode="Markdown")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü—É words
                cur.execute("INSERT INTO words (english, russian) VALUES (%s, %s)", (english, russian))
                conn.commit()
                # –î–æ—Å—Ç–∞—ë–º id —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                cur.execute("SELECT word_id FROM words WHERE english = %s", (english,))
                word_id = cur.fetchone()[0]
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –≤ —Ç–∞–±–ª–∏—Ü—É user_words
                cur.execute("INSERT INTO user_words (user_id, word_id) VALUES (%s, %s)", (user_id, word_id))
                conn.commit()
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ *{english} - {russian}* –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å.",
                                 parse_mode="Markdown")

    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å.")


def delete_word(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è:"
    )
    bot.register_next_step_handler(msg, process_word_deletion)


def process_word_deletion(message):
    english_word = message.text.strip().lower()

    with conn.cursor() as cur:
        # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_words
        cur.execute("DELETE FROM user_words WHERE word_id IN (SELECT word_id FROM words WHERE english = %s)", (english_word,))

        # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã words
        cur.execute("DELETE FROM words WHERE english = %s", (english_word,))
        conn.commit()

        if cur.rowcount > 0:
            bot.send_message(
                message.chat.id,
                f"–°–ª–æ–≤–æ *{english_word}* —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.",
                parse_mode="Markdown"
            )
        else:
            bot.send_message(
                message.chat.id,
                f"–°–ª–æ–≤–æ *{english_word}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ.",
                parse_mode="Markdown"
            )


def check_answer(call):
    user_answer, word_id = call.data.split("_")[1:]
    word_id = int(word_id)
    with conn.cursor() as cur:
        cur.execute("SELECT english FROM words WHERE word_id = %s", (word_id,))
        correct_answer = cur.fetchone()[0]

    if user_answer.lower() == correct_answer.lower():
        bot.answer_callback_query(call.id, "–í–µ—Ä–Ω–æ!")
    else:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def process_word_deletion_callback(call):  # –ò–∑–º–µ–Ω–∏–ª –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    word_id = int(call.data.split("_")[1])
    user_id = call.message.chat.id

    with conn.cursor() as cur:
        cur.execute(
            "DELETE FROM user_words WHERE user_id = %s AND word_id = %s",
            (user_id,
             word_id))
        conn.commit()

    bot.answer_callback_query(call.id, "–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
